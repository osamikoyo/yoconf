// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/yoconf.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	YoConf_CreateChunk_FullMethodName = "/YoConf/CreateChunk"
	YoConf_RollOn_FullMethodName      = "/YoConf/RollOn"
	YoConf_DeleteChunk_FullMethodName = "/YoConf/DeleteChunk"
)

// YoConfClient is the client API for YoConf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YoConfClient interface {
	CreateChunk(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*Resp, error)
	RollOn(ctx context.Context, in *RollOnRequest, opts ...grpc.CallOption) (*Resp, error)
	DeleteChunk(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Resp, error)
}

type yoConfClient struct {
	cc grpc.ClientConnInterface
}

func NewYoConfClient(cc grpc.ClientConnInterface) YoConfClient {
	return &yoConfClient{cc}
}

func (c *yoConfClient) CreateChunk(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*Resp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Resp)
	err := c.cc.Invoke(ctx, YoConf_CreateChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yoConfClient) RollOn(ctx context.Context, in *RollOnRequest, opts ...grpc.CallOption) (*Resp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Resp)
	err := c.cc.Invoke(ctx, YoConf_RollOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yoConfClient) DeleteChunk(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Resp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Resp)
	err := c.cc.Invoke(ctx, YoConf_DeleteChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YoConfServer is the server API for YoConf service.
// All implementations must embed UnimplementedYoConfServer
// for forward compatibility.
type YoConfServer interface {
	CreateChunk(context.Context, *Chunk) (*Resp, error)
	RollOn(context.Context, *RollOnRequest) (*Resp, error)
	DeleteChunk(context.Context, *DeleteRequest) (*Resp, error)
	mustEmbedUnimplementedYoConfServer()
}

// UnimplementedYoConfServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedYoConfServer struct{}

func (UnimplementedYoConfServer) CreateChunk(context.Context, *Chunk) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChunk not implemented")
}
func (UnimplementedYoConfServer) RollOn(context.Context, *RollOnRequest) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollOn not implemented")
}
func (UnimplementedYoConfServer) DeleteChunk(context.Context, *DeleteRequest) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChunk not implemented")
}
func (UnimplementedYoConfServer) mustEmbedUnimplementedYoConfServer() {}
func (UnimplementedYoConfServer) testEmbeddedByValue()                {}

// UnsafeYoConfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YoConfServer will
// result in compilation errors.
type UnsafeYoConfServer interface {
	mustEmbedUnimplementedYoConfServer()
}

func RegisterYoConfServer(s grpc.ServiceRegistrar, srv YoConfServer) {
	// If the following call pancis, it indicates UnimplementedYoConfServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&YoConf_ServiceDesc, srv)
}

func _YoConf_CreateChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YoConfServer).CreateChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YoConf_CreateChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YoConfServer).CreateChunk(ctx, req.(*Chunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _YoConf_RollOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YoConfServer).RollOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YoConf_RollOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YoConfServer).RollOn(ctx, req.(*RollOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YoConf_DeleteChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YoConfServer).DeleteChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YoConf_DeleteChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YoConfServer).DeleteChunk(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YoConf_ServiceDesc is the grpc.ServiceDesc for YoConf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YoConf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YoConf",
	HandlerType: (*YoConfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChunk",
			Handler:    _YoConf_CreateChunk_Handler,
		},
		{
			MethodName: "RollOn",
			Handler:    _YoConf_RollOn_Handler,
		},
		{
			MethodName: "DeleteChunk",
			Handler:    _YoConf_DeleteChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/yoconf.proto",
}
